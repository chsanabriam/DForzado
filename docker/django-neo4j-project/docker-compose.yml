# version: '3.8'

services:
  postgres:
    image: ankane/pgvector:v0.5.1
    container_name: django_neo4j_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-django_neo4j_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-django_neo4j_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis - Para caché LLM (NUEVO pero mínimo)
  redis:
    image: redis:7-alpine
    container_name: django_neo4j_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    command: redis-server --appendonly yes
  neo4j:
    build: ./neo4j
    container_name: neo4j_db
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
      # - ./neo4j/conf:/conf
      - ./neo4j/plugins:/plugins
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}

      - NEO4J_PLUGINS='["apoc", "graph-data-science"]'
      # Aumentar la memoria para transacciones (ajusta según tus recursos)
      # - NEO4J_server_memory_transaction_total_max=6G
      - NEO4J_server_memory_heap_initial__size=6G
      - NEO4J_server_memory_heap_max__size=6G
      - NEO4J_server_memory_pagecache_size=6G
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      # Configuración para resolver el problema de SSL
      - NEO4J_server_bolt_tls__level=DISABLED
      - NEO4J_server_ssl_policy_bolt_enabled=false
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${NEO4J_USER:-neo4j} -p ${NEO4J_PASSWORD:-neo4j123} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  django:
      build: ./django
      container_name: django_app
      restart: unless-stopped
      volumes:
        - ./django:/app
        - ./django/static:/app/static
        - django_logs:/app/logs  # NUEVO: Para logs centralizados
      env_file:
        - .env
      depends_on:
        postgres:
          condition: service_healthy
        neo4j:
          condition: service_healthy
        redis:
          condition: service_started
      networks:
        - app_network

  nginx:
    build: ./nginx
    container_name: nginx_server
    restart: unless-stopped
    ports:
      - "8690:80"
      - "443:443"
    volumes:
      - ./django/static:/app/static
      # - ./django/media:/app/media
    depends_on:
      - django
    networks:
      - app_network

# NUEVO: Definición explícita de volúmenes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  django_logs:
    driver: local


networks:
  app_network:
    driver: bridge
